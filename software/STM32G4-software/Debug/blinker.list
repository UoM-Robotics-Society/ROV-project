
blinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800292c  0800292c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800292c  0800292c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800292c  0800292c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800292c  0800292c  0001292c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002930  08002930  00012930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002940  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc58  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001869  00000000  00000000  0002bc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c62c  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b861  00000000  00000000  0004b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bac10  00000000  00000000  00056a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  001116c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002904 	.word	0x08002904

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002904 	.word	0x08002904

08000218 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000226:	f000 fd11 	bl	8000c4c <HAL_GPIO_TogglePin>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	48000800 	.word	0x48000800

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 f9eb 	bl	8000616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f80a 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f8d8 	bl	80003f8 <MX_GPIO_Init>
  MX_TIM15_Init();
 8000248:	f000 f852 	bl	80002f0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15);
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <main+0x1c>)
 800024e:	f001 fac7 	bl	80017e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000252:	e7fe      	b.n	8000252 <main+0x1a>
 8000254:	20000028 	.word	0x20000028

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	; 0x50
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2238      	movs	r2, #56	; 0x38
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fb44 	bl	80028f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fd00 	bl	8000c80 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2340      	movs	r3, #64	; 0x40
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000296:	2304      	movs	r3, #4
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800029a:	2355      	movs	r3, #85	; 0x55
 800029c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fd9a 	bl	8000de8 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ba:	f000 f8e9 	bl	8000490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f89e 	bl	8001418 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002e2:	f000 f8d5 	bl	8000490 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3750      	adds	r7, #80	; 0x50
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b098      	sub	sp, #96	; 0x60
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	615a      	str	r2, [r3, #20]
 8000314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2234      	movs	r2, #52	; 0x34
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f002 fae9 	bl	80028f4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000322:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000324:	4a33      	ldr	r2, [pc, #204]	; (80003f4 <MX_TIM15_Init+0x104>)
 8000326:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16999;
 8000328:	4b31      	ldr	r3, [pc, #196]	; (80003f0 <MX_TIM15_Init+0x100>)
 800032a:	f244 2267 	movw	r2, #16999	; 0x4267
 800032e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8000336:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000338:	f242 720f 	movw	r2, #9999	; 0x270f
 800033c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033e:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_TIM15_Init+0x100>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000350:	4827      	ldr	r0, [pc, #156]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000352:	f001 faaf 	bl	80018b4 <HAL_TIM_PWM_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 800035c:	f000 f898 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000368:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800036c:	4619      	mov	r1, r3
 800036e:	4820      	ldr	r0, [pc, #128]	; (80003f0 <MX_TIM15_Init+0x100>)
 8000370:	f002 f934 	bl	80025dc <HAL_TIMEx_MasterConfigSynchronization>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800037a:	f000 f889 	bl	8000490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800037e:	2360      	movs	r3, #96	; 0x60
 8000380:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000386:	2300      	movs	r3, #0
 8000388:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800038a:	2300      	movs	r3, #0
 800038c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000396:	2300      	movs	r3, #0
 8000398:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800039a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800039e:	2204      	movs	r2, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4813      	ldr	r0, [pc, #76]	; (80003f0 <MX_TIM15_Init+0x100>)
 80003a4:	f001 fc5c 	bl	8001c60 <HAL_TIM_PWM_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80003ae:	f000 f86f 	bl	8000490 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_TIM15_Init+0x100>)
 80003da:	f002 f981 	bl	80026e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80003e4:	f000 f854 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	3760      	adds	r7, #96	; 0x60
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028
 80003f4:	40014000 	.word	0x40014000

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 030c 	add.w	r3, r7, #12
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_GPIO_Init+0x90>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <MX_GPIO_Init+0x90>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_GPIO_Init+0x90>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_GPIO_Init+0x90>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <MX_GPIO_Init+0x90>)
 800042c:	f043 0320 	orr.w	r3, r3, #32
 8000430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_GPIO_Init+0x90>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_GPIO_Init+0x90>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <MX_GPIO_Init+0x90>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_GPIO_Init+0x90>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_GPIO_Init+0x94>)
 800045e:	f000 fbdd 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4619      	mov	r1, r3
 800047a:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_GPIO_Init+0x94>)
 800047c:	f000 fa4c 	bl	8000918 <HAL_GPIO_Init>

}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	48000800 	.word	0x48000800

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x44>)
 80004a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6613      	str	r3, [r2, #96]	; 0x60
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_MspInit+0x44>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	6593      	str	r3, [r2, #88]	; 0x58
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004d2:	f000 fc79 	bl	8000dc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_TIM_PWM_MspInit+0x44>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d113      	bne.n	800051e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_TIM_PWM_MspInit+0x48>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <HAL_TIM_PWM_MspInit+0x48>)
 80004fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000500:	6613      	str	r3, [r2, #96]	; 0x60
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_TIM_PWM_MspInit+0x48>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2018      	movs	r0, #24
 8000514:	f000 f9cb 	bl	80008ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000518:	2018      	movs	r0, #24
 800051a:	f000 f9e2 	bl	80008e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40014000 	.word	0x40014000
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f89e 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800058a:	f001 f9ea 	bl	8001962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000028 	.word	0x20000028

08000598 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <SystemInit+0x28>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <SystemInit+0x28>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <SystemInit+0x28>)
 80005ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b2:	609a      	str	r2, [r3, #8]
#endif
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490e      	ldr	r1, [pc, #56]	; (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0b      	ldr	r2, [pc, #44]	; (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0b      	ldr	r4, [pc, #44]	; (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ee:	f7ff ffd3 	bl	8000598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f002 f95b 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f6:	f7ff fe1f 	bl	8000238 <main>

080005fa <LoopForever>:

LoopForever:
    b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000608:	08002934 	.word	0x08002934
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000610:	20000078 	.word	0x20000078

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>

08000616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f939 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f80e 	bl	8000648 <HAL_InitTick>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	e001      	b.n	800063c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000638:	f7ff ff30 	bl	800049c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800063c:	79fb      	ldrb	r3, [r7, #7]

}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_InitTick+0x68>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d022      	beq.n	80006a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_InitTick+0x6c>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_InitTick+0x68>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000668:	fbb1 f3f3 	udiv	r3, r1, r3
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f944 	bl	80008fe <HAL_SYSTICK_Config>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10f      	bne.n	800069c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d809      	bhi.n	8000696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000682:	2200      	movs	r2, #0
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800068a:	f000 f910 	bl	80008ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_InitTick+0x70>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	e007      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e004      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e001      	b.n	80006a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x20>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <HAL_IncTick+0x1c>)
 80006cc:	6013      	str	r3, [r2, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000074 	.word	0x20000074
 80006dc:	20000008 	.word	0x20000008

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000074 	.word	0x20000074

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <__NVIC_EnableIRQ+0x38>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff29 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff40 	bl	8000740 <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff33 	bl	800075c <__NVIC_EnableIRQ>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffa4 	bl	8000854 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000926:	e15a      	b.n	8000bde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 814c 	beq.w	8000bd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d00b      	beq.n	8000960 <HAL_GPIO_Init+0x48>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d007      	beq.n	8000960 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000954:	2b11      	cmp	r3, #17
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b12      	cmp	r3, #18
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	f003 0201 	and.w	r2, r3, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d123      	bne.n	8000a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691a      	ldr	r2, [r3, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 0203 	and.w	r2, r3, #3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 80a6 	beq.w	8000bd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <HAL_GPIO_Init+0x2e4>)
 8000a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a90:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <HAL_GPIO_Init+0x2e4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6613      	str	r3, [r2, #96]	; 0x60
 8000a98:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <HAL_GPIO_Init+0x2e4>)
 8000a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000aa4:	4a56      	ldr	r2, [pc, #344]	; (8000c00 <HAL_GPIO_Init+0x2e8>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	220f      	movs	r2, #15
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ace:	d01f      	beq.n	8000b10 <HAL_GPIO_Init+0x1f8>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <HAL_GPIO_Init+0x2ec>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d019      	beq.n	8000b0c <HAL_GPIO_Init+0x1f4>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <HAL_GPIO_Init+0x2f0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1f0>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a4a      	ldr	r2, [pc, #296]	; (8000c0c <HAL_GPIO_Init+0x2f4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1ec>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <HAL_GPIO_Init+0x2f8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1e8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <HAL_GPIO_Init+0x2fc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1e4>
 8000af8:	2305      	movs	r3, #5
 8000afa:	e00a      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000afc:	2306      	movs	r3, #6
 8000afe:	e008      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e004      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b10:	2300      	movs	r3, #0
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	f002 0203 	and.w	r2, r2, #3
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b22:	4937      	ldr	r1, [pc, #220]	; (8000c00 <HAL_GPIO_Init+0x2e8>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b30:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b54:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f47f ae9d 	bne.w	8000928 <HAL_GPIO_Init+0x10>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48001400 	.word	0x48001400
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43d9      	mvns	r1, r3
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	400b      	ands	r3, r1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d141      	bne.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9a:	d131      	bne.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c9c:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cb4:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2232      	movs	r2, #50	; 0x32
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	0c9b      	lsrs	r3, r3, #18
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd2:	e002      	b.n	8000cda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d102      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f2      	bne.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfa:	d158      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e057      	b.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d06:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d10:	e04d      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d18:	d141      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d131      	bne.n	8000d8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d40:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2232      	movs	r2, #50	; 0x32
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	0c9b      	lsrs	r3, r3, #18
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d5e:	e002      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d72:	d102      	bne.n	8000d7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f2      	bne.n	8000d60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d86:	d112      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e011      	b.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d9c:	e007      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40007000 	.word	0x40007000
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	431bde83 	.word	0x431bde83

08000dc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd6:	6093      	str	r3, [r2, #8]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40007000 	.word	0x40007000

08000de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e308      	b.n	800140c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d075      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e06:	4ba3      	ldr	r3, [pc, #652]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e10:	4ba0      	ldr	r3, [pc, #640]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2b0c      	cmp	r3, #12
 8000e1e:	d102      	bne.n	8000e26 <HAL_RCC_OscConfig+0x3e>
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d002      	beq.n	8000e2c <HAL_RCC_OscConfig+0x44>
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d10b      	bne.n	8000e44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	4b99      	ldr	r3, [pc, #612]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d05b      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x108>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d157      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e2e3      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4c:	d106      	bne.n	8000e5c <HAL_RCC_OscConfig+0x74>
 8000e4e:	4b91      	ldr	r3, [pc, #580]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a90      	ldr	r2, [pc, #576]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e01d      	b.n	8000e98 <HAL_RCC_OscConfig+0xb0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x98>
 8000e66:	4b8b      	ldr	r3, [pc, #556]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a8a      	ldr	r2, [pc, #552]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4b88      	ldr	r3, [pc, #544]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a87      	ldr	r2, [pc, #540]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e00b      	b.n	8000e98 <HAL_RCC_OscConfig+0xb0>
 8000e80:	4b84      	ldr	r3, [pc, #528]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a83      	ldr	r2, [pc, #524]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b81      	ldr	r3, [pc, #516]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a80      	ldr	r2, [pc, #512]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d013      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc1e 	bl	80006e0 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fc1a 	bl	80006e0 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e2a8      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eba:	4b76      	ldr	r3, [pc, #472]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xc0>
 8000ec6:	e014      	b.n	8000ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fc0a 	bl	80006e0 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fc06 	bl	80006e0 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	; 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e294      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ee2:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xe8>
 8000eee:	e000      	b.n	8000ef2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d075      	beq.n	8000fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000efe:	4b65      	ldr	r3, [pc, #404]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f08:	4b62      	ldr	r3, [pc, #392]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2b0c      	cmp	r3, #12
 8000f16:	d102      	bne.n	8000f1e <HAL_RCC_OscConfig+0x136>
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d002      	beq.n	8000f24 <HAL_RCC_OscConfig+0x13c>
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d11f      	bne.n	8000f64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f24:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x154>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e267      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	061b      	lsls	r3, r3, #24
 8000f4a:	4952      	ldr	r1, [pc, #328]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_RCC_OscConfig+0x2b0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fb77 	bl	8000648 <HAL_InitTick>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d043      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e253      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d023      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fbb2 	bl	80006e0 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fbae 	bl	80006e0 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e23c      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f92:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	061b      	lsls	r3, r3, #24
 8000fac:	4939      	ldr	r1, [pc, #228]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	604b      	str	r3, [r1, #4]
 8000fb2:	e01a      	b.n	8000fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a36      	ldr	r2, [pc, #216]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fb8e 	bl	80006e0 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fb8a 	bl	80006e0 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e218      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x1e0>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d03c      	beq.n	8001070 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d01c      	beq.n	8001038 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001004:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100e:	f7ff fb67 	bl	80006e0 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001016:	f7ff fb63 	bl	80006e0 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e1f1      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0ef      	beq.n	8001016 <HAL_RCC_OscConfig+0x22e>
 8001036:	e01b      	b.n	8001070 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 800103a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001048:	f7ff fb4a 	bl	80006e0 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff fb46 	bl	80006e0 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1d4      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1ef      	bne.n	8001050 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ab 	beq.w	80011d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <HAL_RCC_OscConfig+0x2b4>
 800108e:	2301      	movs	r3, #1
 8001090:	e005      	b.n	800109e <HAL_RCC_OscConfig+0x2b6>
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	20000004 	.word	0x20000004
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00d      	beq.n	80010be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4baf      	ldr	r3, [pc, #700]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4aae      	ldr	r2, [pc, #696]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4bac      	ldr	r3, [pc, #688]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010ba:	2301      	movs	r3, #1
 80010bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010be:	4ba9      	ldr	r3, [pc, #676]	; (8001364 <HAL_RCC_OscConfig+0x57c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d118      	bne.n	80010fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ca:	4ba6      	ldr	r3, [pc, #664]	; (8001364 <HAL_RCC_OscConfig+0x57c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4aa5      	ldr	r2, [pc, #660]	; (8001364 <HAL_RCC_OscConfig+0x57c>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fb03 	bl	80006e0 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010de:	f7ff faff 	bl	80006e0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e18d      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f0:	4b9c      	ldr	r3, [pc, #624]	; (8001364 <HAL_RCC_OscConfig+0x57c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_RCC_OscConfig+0x32e>
 8001104:	4b96      	ldr	r3, [pc, #600]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110a:	4a95      	ldr	r2, [pc, #596]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001114:	e024      	b.n	8001160 <HAL_RCC_OscConfig+0x378>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d110      	bne.n	8001140 <HAL_RCC_OscConfig+0x358>
 800111e:	4b90      	ldr	r3, [pc, #576]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001124:	4a8e      	ldr	r2, [pc, #568]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112e:	4b8c      	ldr	r3, [pc, #560]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001134:	4a8a      	ldr	r2, [pc, #552]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800113e:	e00f      	b.n	8001160 <HAL_RCC_OscConfig+0x378>
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001146:	4a86      	ldr	r2, [pc, #536]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001150:	4b83      	ldr	r3, [pc, #524]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	4a82      	ldr	r2, [pc, #520]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d016      	beq.n	8001196 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff faba 	bl	80006e0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fab6 	bl	80006e0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f241 3288 	movw	r2, #5000	; 0x1388
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e142      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0ed      	beq.n	8001170 <HAL_RCC_OscConfig+0x388>
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001196:	f7ff faa3 	bl	80006e0 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f7ff fa9f 	bl	80006e0 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e12b      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80011b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ed      	bne.n	800119e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c8:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	4a64      	ldr	r2, [pc, #400]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80011ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d03c      	beq.n	800125a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01c      	beq.n	8001222 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80011ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ee:	4a5c      	ldr	r2, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fa72 	bl	80006e0 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001200:	f7ff fa6e 	bl	80006e0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e0fc      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001212:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ef      	beq.n	8001200 <HAL_RCC_OscConfig+0x418>
 8001220:	e01b      	b.n	800125a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001222:	4b4f      	ldr	r3, [pc, #316]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001232:	f7ff fa55 	bl	80006e0 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800123a:	f7ff fa51 	bl	80006e0 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e0df      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800124e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ef      	bne.n	800123a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80d3 	beq.w	800140a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001264:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b0c      	cmp	r3, #12
 800126e:	f000 808d 	beq.w	800138c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d15a      	bne.n	8001330 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a38      	ldr	r2, [pc, #224]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fa2b 	bl	80006e0 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fa27 	bl	80006e0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e0b5      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_RCC_OscConfig+0x580>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6a11      	ldr	r1, [r2, #32]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012bc:	3a01      	subs	r2, #1
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	4311      	orrs	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80012c6:	0212      	lsls	r2, r2, #8
 80012c8:	4311      	orrs	r1, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012ce:	0852      	lsrs	r2, r2, #1
 80012d0:	3a01      	subs	r2, #1
 80012d2:	0552      	lsls	r2, r2, #21
 80012d4:	4311      	orrs	r1, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012da:	0852      	lsrs	r2, r2, #1
 80012dc:	3a01      	subs	r2, #1
 80012de:	0652      	lsls	r2, r2, #25
 80012e0:	4311      	orrs	r1, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012e6:	06d2      	lsls	r2, r2, #27
 80012e8:	430a      	orrs	r2, r1
 80012ea:	491d      	ldr	r1, [pc, #116]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80012f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff f9ea 	bl	80006e0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff f9e6 	bl	80006e0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e074      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x528>
 800132e:	e06c      	b.n	800140a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800133a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 8001342:	f023 0303 	bic.w	r3, r3, #3
 8001346:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_RCC_OscConfig+0x578>)
 800134e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff f9c2 	bl	80006e0 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800135e:	e00e      	b.n	800137e <HAL_RCC_OscConfig+0x596>
 8001360:	40021000 	.word	0x40021000
 8001364:	40007000 	.word	0x40007000
 8001368:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff f9b8 	bl	80006e0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e046      	b.n	800140c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_OscConfig+0x62c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x584>
 800138a:	e03e      	b.n	800140a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e039      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCC_OscConfig+0x62c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d12c      	bne.n	8001406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	3b01      	subs	r3, #1
 80013b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d123      	bne.n	8001406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d11b      	bne.n	8001406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d113      	bne.n	8001406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	3b01      	subs	r3, #1
 80013ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e11e      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b91      	ldr	r3, [pc, #580]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b8e      	ldr	r3, [pc, #568]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 020f 	bic.w	r2, r3, #15
 8001446:	498c      	ldr	r1, [pc, #560]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b8a      	ldr	r3, [pc, #552]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e106      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d073      	beq.n	8001554 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d129      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001474:	4b81      	ldr	r3, [pc, #516]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0f4      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001484:	f000 f966 	bl	8001754 <RCC_GetSysClockFreqFromPLLSource>
 8001488:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4a7c      	ldr	r2, [pc, #496]	; (8001680 <HAL_RCC_ClockConfig+0x268>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d93f      	bls.n	8001512 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d033      	beq.n	8001512 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d12f      	bne.n	8001512 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ba:	4a70      	ldr	r2, [pc, #448]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e024      	b.n	8001512 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d0:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0c6      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0be      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014f0:	f000 f8ce 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4a61      	ldr	r2, [pc, #388]	; (8001680 <HAL_RCC_ClockConfig+0x268>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d909      	bls.n	8001512 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001506:	4a5d      	ldr	r2, [pc, #372]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b5a      	ldr	r3, [pc, #360]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4957      	ldr	r1, [pc, #348]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001524:	f7ff f8dc 	bl	80006e0 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f8d8 	bl	80006e0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e095      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b4e      	ldr	r3, [pc, #312]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156c:	4b43      	ldr	r3, [pc, #268]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a42      	ldr	r2, [pc, #264]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001576:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800158c:	4a3b      	ldr	r2, [pc, #236]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 800158e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4936      	ldr	r1, [pc, #216]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
 80015a6:	e008      	b.n	80015ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b80      	cmp	r3, #128	; 0x80
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 80015b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d21d      	bcs.n	8001604 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 020f 	bic.w	r2, r3, #15
 80015d0:	4929      	ldr	r1, [pc, #164]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f882 	bl	80006e0 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f87e 	bl	80006e0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e03b      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d1ed      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4917      	ldr	r1, [pc, #92]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	490f      	ldr	r1, [pc, #60]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001642:	f000 f825 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 8001646:	4602      	mov	r2, r0
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_ClockConfig+0x264>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	490c      	ldr	r1, [pc, #48]	; (8001684 <HAL_RCC_ClockConfig+0x26c>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x270>)
 8001660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_ClockConfig+0x274>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ffee 	bl	8000648 <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000
 800167c:	40021000 	.word	0x40021000
 8001680:	04c4b400 	.word	0x04c4b400
 8001684:	0800291c 	.word	0x0800291c
 8001688:	20000000 	.word	0x20000000
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d102      	bne.n	80016a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e047      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	e03e      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	d136      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3301      	adds	r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d10c      	bne.n	80016fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ee:	68d2      	ldr	r2, [r2, #12]
 80016f0:	0a12      	lsrs	r2, r2, #8
 80016f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
      break;
 80016fc:	e00c      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	0a12      	lsrs	r2, r2, #8
 800170c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
      break;
 8001716:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0e5b      	lsrs	r3, r3, #25
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	3301      	adds	r3, #1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e001      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001738:	693b      	ldr	r3, [r7, #16]
}
 800173a:	4618      	mov	r0, r3
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	00f42400 	.word	0x00f42400
 8001750:	016e3600 	.word	0x016e3600

08001754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d10c      	bne.n	8001792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001782:	68d2      	ldr	r2, [r2, #12]
 8001784:	0a12      	lsrs	r2, r2, #8
 8001786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
    break;
 8001790:	e00c      	b.n	80017ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800179c:	68d2      	ldr	r2, [r2, #12]
 800179e:	0a12      	lsrs	r2, r2, #8
 80017a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    break;
 80017aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0e5b      	lsrs	r3, r3, #25
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	016e3600 	.word	0x016e3600
 80017dc:	00f42400 	.word	0x00f42400

080017e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d001      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e04a      	b.n	800188e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_TIM_Base_Start_IT+0xbc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d018      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x6c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001822:	d013      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x6c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00e      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x6c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d009      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x6c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d004      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x6c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_TIM_Base_Start_IT+0xcc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d115      	bne.n	8001878 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d015      	beq.n	800188a <HAL_TIM_Base_Start_IT+0xaa>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d011      	beq.n	800188a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001876:	e008      	b.n	800188a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e000      	b.n	800188c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40000800 	.word	0x40000800
 80018a8:	40013400 	.word	0x40013400
 80018ac:	40014000 	.word	0x40014000
 80018b0:	00010007 	.word	0x00010007

080018b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e049      	b.n	800195a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fe02 	bl	80004e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 faec 	bl	8001ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	d122      	bne.n	80019be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d11b      	bne.n	80019be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f06f 0202 	mvn.w	r2, #2
 800198e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fa75 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 80019aa:	e005      	b.n	80019b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fa67 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fa78 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d122      	bne.n	8001a12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d11b      	bne.n	8001a12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0204 	mvn.w	r2, #4
 80019e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fa4b 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 80019fe:	e005      	b.n	8001a0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fa3d 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fa4e 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d122      	bne.n	8001a66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11b      	bne.n	8001a66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f06f 0208 	mvn.w	r2, #8
 8001a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fa21 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001a52:	e005      	b.n	8001a60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fa13 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fa24 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d122      	bne.n	8001aba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d11b      	bne.n	8001aba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f06f 0210 	mvn.w	r2, #16
 8001a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f9f7 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001aa6:	e005      	b.n	8001ab4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f9e9 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f9fa 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0201 	mvn.w	r2, #1
 8001ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7fe fb99 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af0:	2b80      	cmp	r3, #128	; 0x80
 8001af2:	d10e      	bne.n	8001b12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	2b80      	cmp	r3, #128	; 0x80
 8001b00:	d107      	bne.n	8001b12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fe91 	bl	8002834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d107      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fe84 	bl	8002848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	2b40      	cmp	r3, #64	; 0x40
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d107      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f9a8 	bl	8001ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d10e      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d107      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0220 	mvn.w	r2, #32
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fe44 	bl	8002820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bb6:	d107      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fe4a 	bl	800285c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001be6:	d107      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fe3c 	bl	8002870 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c06:	d10f      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c16:	d107      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fe2e 	bl	8002884 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c36:	d10f      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fe20 	bl	8002898 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0fd      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x216>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b14      	cmp	r3, #20
 8001c86:	f200 80f0 	bhi.w	8001e6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001ce5 	.word	0x08001ce5
 8001c94:	08001e6b 	.word	0x08001e6b
 8001c98:	08001e6b 	.word	0x08001e6b
 8001c9c:	08001e6b 	.word	0x08001e6b
 8001ca0:	08001d25 	.word	0x08001d25
 8001ca4:	08001e6b 	.word	0x08001e6b
 8001ca8:	08001e6b 	.word	0x08001e6b
 8001cac:	08001e6b 	.word	0x08001e6b
 8001cb0:	08001d67 	.word	0x08001d67
 8001cb4:	08001e6b 	.word	0x08001e6b
 8001cb8:	08001e6b 	.word	0x08001e6b
 8001cbc:	08001e6b 	.word	0x08001e6b
 8001cc0:	08001da7 	.word	0x08001da7
 8001cc4:	08001e6b 	.word	0x08001e6b
 8001cc8:	08001e6b 	.word	0x08001e6b
 8001ccc:	08001e6b 	.word	0x08001e6b
 8001cd0:	08001de9 	.word	0x08001de9
 8001cd4:	08001e6b 	.word	0x08001e6b
 8001cd8:	08001e6b 	.word	0x08001e6b
 8001cdc:	08001e6b 	.word	0x08001e6b
 8001ce0:	08001e29 	.word	0x08001e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f980 	bl	8001ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6999      	ldr	r1, [r3, #24]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	619a      	str	r2, [r3, #24]
      break;
 8001d22:	e0a3      	b.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f9f0 	bl	8002110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6999      	ldr	r1, [r3, #24]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	619a      	str	r2, [r3, #24]
      break;
 8001d64:	e082      	b.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fa59 	bl	8002224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0208 	orr.w	r2, r2, #8
 8001d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69d9      	ldr	r1, [r3, #28]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
      break;
 8001da4:	e062      	b.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fac1 	bl	8002334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69d9      	ldr	r1, [r3, #28]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	61da      	str	r2, [r3, #28]
      break;
 8001de6:	e041      	b.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fb2a 	bl	8002448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0208 	orr.w	r2, r2, #8
 8001e02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001e26:	e021      	b.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fb6e 	bl	8002510 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	021a      	lsls	r2, r3, #8
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001e68:	e000      	b.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8001e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop

08001e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <TIM_Base_SetConfig+0x104>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00f      	beq.n	8001f08 <TIM_Base_SetConfig+0x38>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d00b      	beq.n	8001f08 <TIM_Base_SetConfig+0x38>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a39      	ldr	r2, [pc, #228]	; (8001fd8 <TIM_Base_SetConfig+0x108>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <TIM_Base_SetConfig+0x38>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <TIM_Base_SetConfig+0x10c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x38>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <TIM_Base_SetConfig+0x110>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <TIM_Base_SetConfig+0x104>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01b      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d017      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <TIM_Base_SetConfig+0x108>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a29      	ldr	r2, [pc, #164]	; (8001fdc <TIM_Base_SetConfig+0x10c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00f      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <TIM_Base_SetConfig+0x110>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0x8a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a25      	ldr	r2, [pc, #148]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <TIM_Base_SetConfig+0x104>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00f      	beq.n	8001fb8 <TIM_Base_SetConfig+0xe8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <TIM_Base_SetConfig+0x110>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00b      	beq.n	8001fb8 <TIM_Base_SetConfig+0xe8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <TIM_Base_SetConfig+0xe8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <TIM_Base_SetConfig+0xe8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40013400 	.word	0x40013400
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f023 0201 	bic.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f023 0302 	bic.w	r3, r3, #2
 800203c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a2c      	ldr	r2, [pc, #176]	; (80020fc <TIM_OC1_SetConfig+0x10c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00f      	beq.n	8002070 <TIM_OC1_SetConfig+0x80>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <TIM_OC1_SetConfig+0x110>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00b      	beq.n	8002070 <TIM_OC1_SetConfig+0x80>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <TIM_OC1_SetConfig+0x114>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <TIM_OC1_SetConfig+0x80>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a29      	ldr	r2, [pc, #164]	; (8002108 <TIM_OC1_SetConfig+0x118>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <TIM_OC1_SetConfig+0x80>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a28      	ldr	r2, [pc, #160]	; (800210c <TIM_OC1_SetConfig+0x11c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d10c      	bne.n	800208a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0308 	bic.w	r3, r3, #8
 8002076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <TIM_OC1_SetConfig+0x10c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_OC1_SetConfig+0xc2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <TIM_OC1_SetConfig+0x110>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_OC1_SetConfig+0xc2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <TIM_OC1_SetConfig+0x114>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_OC1_SetConfig+0xc2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a18      	ldr	r2, [pc, #96]	; (8002108 <TIM_OC1_SetConfig+0x118>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_OC1_SetConfig+0xc2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <TIM_OC1_SetConfig+0x11c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	621a      	str	r2, [r3, #32]
}
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40013400 	.word	0x40013400
 8002104:	40014000 	.word	0x40014000
 8002108:	40014400 	.word	0x40014400
 800210c:	40014800 	.word	0x40014800

08002110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f023 0210 	bic.w	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f023 0320 	bic.w	r3, r3, #32
 800215e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a28      	ldr	r2, [pc, #160]	; (8002210 <TIM_OC2_SetConfig+0x100>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_OC2_SetConfig+0x6c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a27      	ldr	r2, [pc, #156]	; (8002214 <TIM_OC2_SetConfig+0x104>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d10d      	bne.n	8002198 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <TIM_OC2_SetConfig+0x100>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00f      	beq.n	80021c0 <TIM_OC2_SetConfig+0xb0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <TIM_OC2_SetConfig+0x104>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <TIM_OC2_SetConfig+0xb0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <TIM_OC2_SetConfig+0x108>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <TIM_OC2_SetConfig+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a1a      	ldr	r2, [pc, #104]	; (800221c <TIM_OC2_SetConfig+0x10c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_OC2_SetConfig+0xb0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <TIM_OC2_SetConfig+0x110>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d113      	bne.n	80021e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	621a      	str	r2, [r3, #32]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40013400 	.word	0x40013400
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800

08002224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <TIM_OC3_SetConfig+0xfc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_OC3_SetConfig+0x6a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <TIM_OC3_SetConfig+0x100>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <TIM_OC3_SetConfig+0xfc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00f      	beq.n	80022d2 <TIM_OC3_SetConfig+0xae>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <TIM_OC3_SetConfig+0x100>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <TIM_OC3_SetConfig+0xae>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <TIM_OC3_SetConfig+0x104>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <TIM_OC3_SetConfig+0xae>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <TIM_OC3_SetConfig+0x108>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <TIM_OC3_SetConfig+0xae>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <TIM_OC3_SetConfig+0x10c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d113      	bne.n	80022fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	621a      	str	r2, [r3, #32]
}
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40013400 	.word	0x40013400
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800

08002334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <TIM_OC4_SetConfig+0x100>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_OC4_SetConfig+0x6c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a27      	ldr	r2, [pc, #156]	; (8002438 <TIM_OC4_SetConfig+0x104>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d10d      	bne.n	80023bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	031b      	lsls	r3, r3, #12
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <TIM_OC4_SetConfig+0x100>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00f      	beq.n	80023e4 <TIM_OC4_SetConfig+0xb0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <TIM_OC4_SetConfig+0x104>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <TIM_OC4_SetConfig+0xb0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a1b      	ldr	r2, [pc, #108]	; (800243c <TIM_OC4_SetConfig+0x108>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <TIM_OC4_SetConfig+0xb0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <TIM_OC4_SetConfig+0x10c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <TIM_OC4_SetConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a19      	ldr	r2, [pc, #100]	; (8002444 <TIM_OC4_SetConfig+0x110>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d113      	bne.n	800240c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	621a      	str	r2, [r3, #32]
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40013400 	.word	0x40013400
 800243c:	40014000 	.word	0x40014000
 8002440:	40014400 	.word	0x40014400
 8002444:	40014800 	.word	0x40014800

08002448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800248c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a17      	ldr	r2, [pc, #92]	; (80024fc <TIM_OC5_SetConfig+0xb4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00f      	beq.n	80024c2 <TIM_OC5_SetConfig+0x7a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a16      	ldr	r2, [pc, #88]	; (8002500 <TIM_OC5_SetConfig+0xb8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00b      	beq.n	80024c2 <TIM_OC5_SetConfig+0x7a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <TIM_OC5_SetConfig+0xbc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <TIM_OC5_SetConfig+0x7a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <TIM_OC5_SetConfig+0xc0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <TIM_OC5_SetConfig+0x7a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <TIM_OC5_SetConfig+0xc4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d109      	bne.n	80024d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	621a      	str	r2, [r3, #32]
}
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40013400 	.word	0x40013400
 8002504:	40014000 	.word	0x40014000
 8002508:	40014400 	.word	0x40014400
 800250c:	40014800 	.word	0x40014800

08002510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800253e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	051b      	lsls	r3, r3, #20
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <TIM_OC6_SetConfig+0xb8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00f      	beq.n	800258c <TIM_OC6_SetConfig+0x7c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <TIM_OC6_SetConfig+0xbc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00b      	beq.n	800258c <TIM_OC6_SetConfig+0x7c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <TIM_OC6_SetConfig+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <TIM_OC6_SetConfig+0x7c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <TIM_OC6_SetConfig+0xc4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_OC6_SetConfig+0x7c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <TIM_OC6_SetConfig+0xc8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d109      	bne.n	80025a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	029b      	lsls	r3, r3, #10
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40013400 	.word	0x40013400
 80025d0:	40014000 	.word	0x40014000
 80025d4:	40014400 	.word	0x40014400
 80025d8:	40014800 	.word	0x40014800

080025dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e065      	b.n	80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2c      	ldr	r2, [pc, #176]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800262e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d018      	beq.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d013      	beq.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10c      	bne.n	80026ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800269a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40013400 	.word	0x40013400
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40014000 	.word	0x40014000

080026e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e087      	b.n	800280c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a25      	ldr	r2, [pc, #148]	; (800281c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d106      	bne.n	8002798 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d126      	bne.n	80027fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	051b      	lsls	r3, r3, #20
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d106      	bne.n	80027fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40013400 	.word	0x40013400

08002820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4d0d      	ldr	r5, [pc, #52]	; (80028e4 <__libc_init_array+0x38>)
 80028b0:	4c0d      	ldr	r4, [pc, #52]	; (80028e8 <__libc_init_array+0x3c>)
 80028b2:	1b64      	subs	r4, r4, r5
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	2600      	movs	r6, #0
 80028b8:	42a6      	cmp	r6, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	4d0b      	ldr	r5, [pc, #44]	; (80028ec <__libc_init_array+0x40>)
 80028be:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <__libc_init_array+0x44>)
 80028c0:	f000 f820 	bl	8002904 <_init>
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	2600      	movs	r6, #0
 80028ca:	42a6      	cmp	r6, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d4:	4798      	blx	r3
 80028d6:	3601      	adds	r6, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	f855 3b04 	ldr.w	r3, [r5], #4
 80028de:	4798      	blx	r3
 80028e0:	3601      	adds	r6, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	0800292c 	.word	0x0800292c
 80028e8:	0800292c 	.word	0x0800292c
 80028ec:	0800292c 	.word	0x0800292c
 80028f0:	08002930 	.word	0x08002930

080028f4 <memset>:
 80028f4:	4402      	add	r2, r0
 80028f6:	4603      	mov	r3, r0
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
